/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace thriftService {

typedef std::vector<class Tweet>  TweetList;

typedef std::vector<class UserTweetCount>  UserTweetCounts;

typedef std::vector<class Edge>  Edges;

typedef std::vector<class Node>  Nodes;

typedef TweetList Input;

class Cod;

class User;

class Tweet;

class UserTweetCount;

class Edge;

class Node;

class GraphData;

class GraphMetadata;

class Output;

class IOutput;

class FreewordList;

typedef struct _Cod__isset {
  _Cod__isset() : isPoint(false), x(false), y(false) {}
  bool isPoint :1;
  bool x :1;
  bool y :1;
} _Cod__isset;

class Cod : public virtual ::apache::thrift::TBase {
 public:

  Cod(const Cod&);
  Cod& operator=(const Cod&);
  Cod() : hasGeoinfo(0), isPoint(0), x(0), y(0) {
  }

  virtual ~Cod() throw();
  bool hasGeoinfo;
  bool isPoint;
  double x;
  double y;

  _Cod__isset __isset;

  void __set_hasGeoinfo(const bool val);

  void __set_isPoint(const bool val);

  void __set_x(const double val);

  void __set_y(const double val);

  bool operator == (const Cod & rhs) const
  {
    if (!(hasGeoinfo == rhs.hasGeoinfo))
      return false;
    if (__isset.isPoint != rhs.__isset.isPoint)
      return false;
    else if (__isset.isPoint && !(isPoint == rhs.isPoint))
      return false;
    if (__isset.x != rhs.__isset.x)
      return false;
    else if (__isset.x && !(x == rhs.x))
      return false;
    if (__isset.y != rhs.__isset.y)
      return false;
    else if (__isset.y && !(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Cod &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cod & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cod &a, Cod &b);

std::ostream& operator<<(std::ostream& out, const Cod& obj);


class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : name(), screen_name(), verified(0), profile_image_url_https() {
  }

  virtual ~User() throw();
  std::string name;
  std::string screen_name;
  bool verified;
  std::string profile_image_url_https;

  void __set_name(const std::string& val);

  void __set_screen_name(const std::string& val);

  void __set_verified(const bool val);

  void __set_profile_image_url_https(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(screen_name == rhs.screen_name))
      return false;
    if (!(verified == rhs.verified))
      return false;
    if (!(profile_image_url_https == rhs.profile_image_url_https))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

std::ostream& operator<<(std::ostream& out, const User& obj);


class Tweet : public virtual ::apache::thrift::TBase {
 public:

  Tweet(const Tweet&);
  Tweet& operator=(const Tweet&);
  Tweet() : id(), created_at(), text(), _text(), retweet_count(0), favorite_count(0), lang() {
  }

  virtual ~Tweet() throw();
  std::string id;
  std::string created_at;
  std::string text;
  std::string _text;
  User user;
  int32_t retweet_count;
  int32_t favorite_count;
  std::string lang;
  std::vector<std::string>  hashtags;
  Cod geoInfo;

  void __set_id(const std::string& val);

  void __set_created_at(const std::string& val);

  void __set_text(const std::string& val);

  void __set__text(const std::string& val);

  void __set_user(const User& val);

  void __set_retweet_count(const int32_t val);

  void __set_favorite_count(const int32_t val);

  void __set_lang(const std::string& val);

  void __set_hashtags(const std::vector<std::string> & val);

  void __set_geoInfo(const Cod& val);

  bool operator == (const Tweet & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(created_at == rhs.created_at))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(_text == rhs._text))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(retweet_count == rhs.retweet_count))
      return false;
    if (!(favorite_count == rhs.favorite_count))
      return false;
    if (!(lang == rhs.lang))
      return false;
    if (!(hashtags == rhs.hashtags))
      return false;
    if (!(geoInfo == rhs.geoInfo))
      return false;
    return true;
  }
  bool operator != (const Tweet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tweet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tweet &a, Tweet &b);

std::ostream& operator<<(std::ostream& out, const Tweet& obj);


class UserTweetCount : public virtual ::apache::thrift::TBase {
 public:

  UserTweetCount(const UserTweetCount&);
  UserTweetCount& operator=(const UserTweetCount&);
  UserTweetCount() : username(), tweetCount(0) {
  }

  virtual ~UserTweetCount() throw();
  std::string username;
  int32_t tweetCount;

  void __set_username(const std::string& val);

  void __set_tweetCount(const int32_t val);

  bool operator == (const UserTweetCount & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(tweetCount == rhs.tweetCount))
      return false;
    return true;
  }
  bool operator != (const UserTweetCount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTweetCount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserTweetCount &a, UserTweetCount &b);

std::ostream& operator<<(std::ostream& out, const UserTweetCount& obj);


class Edge : public virtual ::apache::thrift::TBase {
 public:

  Edge(const Edge&);
  Edge& operator=(const Edge&);
  Edge() : id(0), source(0), target(0), size(0), weight(0), label() {
  }

  virtual ~Edge() throw();
  int32_t id;
  std::vector<std::string>  tweets;
  int32_t source;
  int32_t target;
  int32_t size;
  int32_t weight;
  std::string label;

  void __set_id(const int32_t val);

  void __set_tweets(const std::vector<std::string> & val);

  void __set_source(const int32_t val);

  void __set_target(const int32_t val);

  void __set_size(const int32_t val);

  void __set_weight(const int32_t val);

  void __set_label(const std::string& val);

  bool operator == (const Edge & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tweets == rhs.tweets))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(label == rhs.label))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Edge &a, Edge &b);

std::ostream& operator<<(std::ostream& out, const Edge& obj);

typedef struct _Node__isset {
  _Node__isset() : x(false), y(false) {}
  bool x :1;
  bool y :1;
} _Node__isset;

class Node : public virtual ::apache::thrift::TBase {
 public:

  Node(const Node&);
  Node& operator=(const Node&);
  Node() : id(0), label(), size(0), weight(0), x(0), y(0) {
  }

  virtual ~Node() throw();
  int32_t id;
  std::string label;
  int32_t size;
  int32_t weight;
  double x;
  double y;

  _Node__isset __isset;

  void __set_id(const int32_t val);

  void __set_label(const std::string& val);

  void __set_size(const int32_t val);

  void __set_weight(const int32_t val);

  void __set_x(const double val);

  void __set_y(const double val);

  bool operator == (const Node & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(label == rhs.label))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (__isset.x != rhs.__isset.x)
      return false;
    else if (__isset.x && !(x == rhs.x))
      return false;
    if (__isset.y != rhs.__isset.y)
      return false;
    else if (__isset.y && !(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Node &a, Node &b);

std::ostream& operator<<(std::ostream& out, const Node& obj);


class GraphData : public virtual ::apache::thrift::TBase {
 public:

  GraphData(const GraphData&);
  GraphData& operator=(const GraphData&);
  GraphData() {
  }

  virtual ~GraphData() throw();
  Edges edges;
  Nodes nodes;

  void __set_edges(const Edges& val);

  void __set_nodes(const Nodes& val);

  bool operator == (const GraphData & rhs) const
  {
    if (!(edges == rhs.edges))
      return false;
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const GraphData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GraphData &a, GraphData &b);

std::ostream& operator<<(std::ostream& out, const GraphData& obj);


class GraphMetadata : public virtual ::apache::thrift::TBase {
 public:

  GraphMetadata(const GraphMetadata&);
  GraphMetadata& operator=(const GraphMetadata&);
  GraphMetadata() : numberOfTweets(0), numberOfNodes(0), numberOfEdges(0) {
  }

  virtual ~GraphMetadata() throw();
  int32_t numberOfTweets;
  int32_t numberOfNodes;
  int32_t numberOfEdges;

  void __set_numberOfTweets(const int32_t val);

  void __set_numberOfNodes(const int32_t val);

  void __set_numberOfEdges(const int32_t val);

  bool operator == (const GraphMetadata & rhs) const
  {
    if (!(numberOfTweets == rhs.numberOfTweets))
      return false;
    if (!(numberOfNodes == rhs.numberOfNodes))
      return false;
    if (!(numberOfEdges == rhs.numberOfEdges))
      return false;
    return true;
  }
  bool operator != (const GraphMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GraphMetadata &a, GraphMetadata &b);

std::ostream& operator<<(std::ostream& out, const GraphMetadata& obj);


class Output : public virtual ::apache::thrift::TBase {
 public:

  Output(const Output&);
  Output& operator=(const Output&);
  Output() {
  }

  virtual ~Output() throw();
  GraphData graphData;
  TweetList tweets;
  GraphMetadata graphMetadata;
  UserTweetCounts topUsers;

  void __set_graphData(const GraphData& val);

  void __set_tweets(const TweetList& val);

  void __set_graphMetadata(const GraphMetadata& val);

  void __set_topUsers(const UserTweetCounts& val);

  bool operator == (const Output & rhs) const
  {
    if (!(graphData == rhs.graphData))
      return false;
    if (!(tweets == rhs.tweets))
      return false;
    if (!(graphMetadata == rhs.graphMetadata))
      return false;
    if (!(topUsers == rhs.topUsers))
      return false;
    return true;
  }
  bool operator != (const Output &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Output & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Output &a, Output &b);

std::ostream& operator<<(std::ostream& out, const Output& obj);

typedef struct _IOutput__isset {
  _IOutput__isset() : oldOutput(false) {}
  bool oldOutput :1;
} _IOutput__isset;

class IOutput : public virtual ::apache::thrift::TBase {
 public:

  IOutput(const IOutput&);
  IOutput& operator=(const IOutput&);
  IOutput() : hasOldGraph(0) {
  }

  virtual ~IOutput() throw();
  bool hasOldGraph;
  Output oldOutput;

  _IOutput__isset __isset;

  void __set_hasOldGraph(const bool val);

  void __set_oldOutput(const Output& val);

  bool operator == (const IOutput & rhs) const
  {
    if (!(hasOldGraph == rhs.hasOldGraph))
      return false;
    if (__isset.oldOutput != rhs.__isset.oldOutput)
      return false;
    else if (__isset.oldOutput && !(oldOutput == rhs.oldOutput))
      return false;
    return true;
  }
  bool operator != (const IOutput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IOutput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IOutput &a, IOutput &b);

std::ostream& operator<<(std::ostream& out, const IOutput& obj);

typedef struct _FreewordList__isset {
  _FreewordList__isset() : ListFreeword(false) {}
  bool ListFreeword :1;
} _FreewordList__isset;

class FreewordList : public virtual ::apache::thrift::TBase {
 public:

  FreewordList(const FreewordList&);
  FreewordList& operator=(const FreewordList&);
  FreewordList() : hasFreewordList(0) {
  }

  virtual ~FreewordList() throw();
  bool hasFreewordList;
  std::vector<std::string>  ListFreeword;

  _FreewordList__isset __isset;

  void __set_hasFreewordList(const bool val);

  void __set_ListFreeword(const std::vector<std::string> & val);

  bool operator == (const FreewordList & rhs) const
  {
    if (!(hasFreewordList == rhs.hasFreewordList))
      return false;
    if (__isset.ListFreeword != rhs.__isset.ListFreeword)
      return false;
    else if (__isset.ListFreeword && !(ListFreeword == rhs.ListFreeword))
      return false;
    return true;
  }
  bool operator != (const FreewordList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FreewordList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FreewordList &a, FreewordList &b);

std::ostream& operator<<(std::ostream& out, const FreewordList& obj);

} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LinkedHashtagsService_H
#define LinkedHashtagsService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "service_types.h"

namespace thriftService {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LinkedHashtagsServiceIf {
 public:
  virtual ~LinkedHashtagsServiceIf() {}
  virtual void thriftGenerateGraphData(Output& _return, const Input& tweetList, const IOutput& oldGraph, const FreewordList& freewordList) = 0;
  virtual bool thriftCreatStream(const std::string& id, const FreewordList& freewordList) = 0;
  virtual bool thriftAddNewTweets(const std::string& id, const Input& tweetList) = 0;
  virtual bool thriftStreamDone(const std::string& id) = 0;
};

class LinkedHashtagsServiceIfFactory {
 public:
  typedef LinkedHashtagsServiceIf Handler;

  virtual ~LinkedHashtagsServiceIfFactory() {}

  virtual LinkedHashtagsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LinkedHashtagsServiceIf* /* handler */) = 0;
};

class LinkedHashtagsServiceIfSingletonFactory : virtual public LinkedHashtagsServiceIfFactory {
 public:
  LinkedHashtagsServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf>& iface) : iface_(iface) {}
  virtual ~LinkedHashtagsServiceIfSingletonFactory() {}

  virtual LinkedHashtagsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LinkedHashtagsServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf> iface_;
};

class LinkedHashtagsServiceNull : virtual public LinkedHashtagsServiceIf {
 public:
  virtual ~LinkedHashtagsServiceNull() {}
  void thriftGenerateGraphData(Output& /* _return */, const Input& /* tweetList */, const IOutput& /* oldGraph */, const FreewordList& /* freewordList */) {
    return;
  }
  bool thriftCreatStream(const std::string& /* id */, const FreewordList& /* freewordList */) {
    bool _return = false;
    return _return;
  }
  bool thriftAddNewTweets(const std::string& /* id */, const Input& /* tweetList */) {
    bool _return = false;
    return _return;
  }
  bool thriftStreamDone(const std::string& /* id */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _LinkedHashtagsService_thriftGenerateGraphData_args__isset {
  _LinkedHashtagsService_thriftGenerateGraphData_args__isset() : tweetList(false), oldGraph(false), freewordList(false) {}
  bool tweetList :1;
  bool oldGraph :1;
  bool freewordList :1;
} _LinkedHashtagsService_thriftGenerateGraphData_args__isset;

class LinkedHashtagsService_thriftGenerateGraphData_args {
 public:

  LinkedHashtagsService_thriftGenerateGraphData_args(const LinkedHashtagsService_thriftGenerateGraphData_args&);
  LinkedHashtagsService_thriftGenerateGraphData_args& operator=(const LinkedHashtagsService_thriftGenerateGraphData_args&);
  LinkedHashtagsService_thriftGenerateGraphData_args() {
  }

  virtual ~LinkedHashtagsService_thriftGenerateGraphData_args() throw();
  Input tweetList;
  IOutput oldGraph;
  FreewordList freewordList;

  _LinkedHashtagsService_thriftGenerateGraphData_args__isset __isset;

  void __set_tweetList(const Input& val);

  void __set_oldGraph(const IOutput& val);

  void __set_freewordList(const FreewordList& val);

  bool operator == (const LinkedHashtagsService_thriftGenerateGraphData_args & rhs) const
  {
    if (!(tweetList == rhs.tweetList))
      return false;
    if (!(oldGraph == rhs.oldGraph))
      return false;
    if (!(freewordList == rhs.freewordList))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftGenerateGraphData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftGenerateGraphData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LinkedHashtagsService_thriftGenerateGraphData_pargs {
 public:


  virtual ~LinkedHashtagsService_thriftGenerateGraphData_pargs() throw();
  const Input* tweetList;
  const IOutput* oldGraph;
  const FreewordList* freewordList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftGenerateGraphData_result__isset {
  _LinkedHashtagsService_thriftGenerateGraphData_result__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftGenerateGraphData_result__isset;

class LinkedHashtagsService_thriftGenerateGraphData_result {
 public:

  LinkedHashtagsService_thriftGenerateGraphData_result(const LinkedHashtagsService_thriftGenerateGraphData_result&);
  LinkedHashtagsService_thriftGenerateGraphData_result& operator=(const LinkedHashtagsService_thriftGenerateGraphData_result&);
  LinkedHashtagsService_thriftGenerateGraphData_result() {
  }

  virtual ~LinkedHashtagsService_thriftGenerateGraphData_result() throw();
  Output success;

  _LinkedHashtagsService_thriftGenerateGraphData_result__isset __isset;

  void __set_success(const Output& val);

  bool operator == (const LinkedHashtagsService_thriftGenerateGraphData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftGenerateGraphData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftGenerateGraphData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftGenerateGraphData_presult__isset {
  _LinkedHashtagsService_thriftGenerateGraphData_presult__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftGenerateGraphData_presult__isset;

class LinkedHashtagsService_thriftGenerateGraphData_presult {
 public:


  virtual ~LinkedHashtagsService_thriftGenerateGraphData_presult() throw();
  Output* success;

  _LinkedHashtagsService_thriftGenerateGraphData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LinkedHashtagsService_thriftCreatStream_args__isset {
  _LinkedHashtagsService_thriftCreatStream_args__isset() : id(false), freewordList(false) {}
  bool id :1;
  bool freewordList :1;
} _LinkedHashtagsService_thriftCreatStream_args__isset;

class LinkedHashtagsService_thriftCreatStream_args {
 public:

  LinkedHashtagsService_thriftCreatStream_args(const LinkedHashtagsService_thriftCreatStream_args&);
  LinkedHashtagsService_thriftCreatStream_args& operator=(const LinkedHashtagsService_thriftCreatStream_args&);
  LinkedHashtagsService_thriftCreatStream_args() : id() {
  }

  virtual ~LinkedHashtagsService_thriftCreatStream_args() throw();
  std::string id;
  FreewordList freewordList;

  _LinkedHashtagsService_thriftCreatStream_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_freewordList(const FreewordList& val);

  bool operator == (const LinkedHashtagsService_thriftCreatStream_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(freewordList == rhs.freewordList))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftCreatStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftCreatStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LinkedHashtagsService_thriftCreatStream_pargs {
 public:


  virtual ~LinkedHashtagsService_thriftCreatStream_pargs() throw();
  const std::string* id;
  const FreewordList* freewordList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftCreatStream_result__isset {
  _LinkedHashtagsService_thriftCreatStream_result__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftCreatStream_result__isset;

class LinkedHashtagsService_thriftCreatStream_result {
 public:

  LinkedHashtagsService_thriftCreatStream_result(const LinkedHashtagsService_thriftCreatStream_result&);
  LinkedHashtagsService_thriftCreatStream_result& operator=(const LinkedHashtagsService_thriftCreatStream_result&);
  LinkedHashtagsService_thriftCreatStream_result() : success(0) {
  }

  virtual ~LinkedHashtagsService_thriftCreatStream_result() throw();
  bool success;

  _LinkedHashtagsService_thriftCreatStream_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const LinkedHashtagsService_thriftCreatStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftCreatStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftCreatStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftCreatStream_presult__isset {
  _LinkedHashtagsService_thriftCreatStream_presult__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftCreatStream_presult__isset;

class LinkedHashtagsService_thriftCreatStream_presult {
 public:


  virtual ~LinkedHashtagsService_thriftCreatStream_presult() throw();
  bool* success;

  _LinkedHashtagsService_thriftCreatStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LinkedHashtagsService_thriftAddNewTweets_args__isset {
  _LinkedHashtagsService_thriftAddNewTweets_args__isset() : id(false), tweetList(false) {}
  bool id :1;
  bool tweetList :1;
} _LinkedHashtagsService_thriftAddNewTweets_args__isset;

class LinkedHashtagsService_thriftAddNewTweets_args {
 public:

  LinkedHashtagsService_thriftAddNewTweets_args(const LinkedHashtagsService_thriftAddNewTweets_args&);
  LinkedHashtagsService_thriftAddNewTweets_args& operator=(const LinkedHashtagsService_thriftAddNewTweets_args&);
  LinkedHashtagsService_thriftAddNewTweets_args() : id() {
  }

  virtual ~LinkedHashtagsService_thriftAddNewTweets_args() throw();
  std::string id;
  Input tweetList;

  _LinkedHashtagsService_thriftAddNewTweets_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_tweetList(const Input& val);

  bool operator == (const LinkedHashtagsService_thriftAddNewTweets_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tweetList == rhs.tweetList))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftAddNewTweets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftAddNewTweets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LinkedHashtagsService_thriftAddNewTweets_pargs {
 public:


  virtual ~LinkedHashtagsService_thriftAddNewTweets_pargs() throw();
  const std::string* id;
  const Input* tweetList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftAddNewTweets_result__isset {
  _LinkedHashtagsService_thriftAddNewTweets_result__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftAddNewTweets_result__isset;

class LinkedHashtagsService_thriftAddNewTweets_result {
 public:

  LinkedHashtagsService_thriftAddNewTweets_result(const LinkedHashtagsService_thriftAddNewTweets_result&);
  LinkedHashtagsService_thriftAddNewTweets_result& operator=(const LinkedHashtagsService_thriftAddNewTweets_result&);
  LinkedHashtagsService_thriftAddNewTweets_result() : success(0) {
  }

  virtual ~LinkedHashtagsService_thriftAddNewTweets_result() throw();
  bool success;

  _LinkedHashtagsService_thriftAddNewTweets_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const LinkedHashtagsService_thriftAddNewTweets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftAddNewTweets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftAddNewTweets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftAddNewTweets_presult__isset {
  _LinkedHashtagsService_thriftAddNewTweets_presult__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftAddNewTweets_presult__isset;

class LinkedHashtagsService_thriftAddNewTweets_presult {
 public:


  virtual ~LinkedHashtagsService_thriftAddNewTweets_presult() throw();
  bool* success;

  _LinkedHashtagsService_thriftAddNewTweets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LinkedHashtagsService_thriftStreamDone_args__isset {
  _LinkedHashtagsService_thriftStreamDone_args__isset() : id(false) {}
  bool id :1;
} _LinkedHashtagsService_thriftStreamDone_args__isset;

class LinkedHashtagsService_thriftStreamDone_args {
 public:

  LinkedHashtagsService_thriftStreamDone_args(const LinkedHashtagsService_thriftStreamDone_args&);
  LinkedHashtagsService_thriftStreamDone_args& operator=(const LinkedHashtagsService_thriftStreamDone_args&);
  LinkedHashtagsService_thriftStreamDone_args() : id() {
  }

  virtual ~LinkedHashtagsService_thriftStreamDone_args() throw();
  std::string id;

  _LinkedHashtagsService_thriftStreamDone_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const LinkedHashtagsService_thriftStreamDone_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftStreamDone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftStreamDone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LinkedHashtagsService_thriftStreamDone_pargs {
 public:


  virtual ~LinkedHashtagsService_thriftStreamDone_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftStreamDone_result__isset {
  _LinkedHashtagsService_thriftStreamDone_result__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftStreamDone_result__isset;

class LinkedHashtagsService_thriftStreamDone_result {
 public:

  LinkedHashtagsService_thriftStreamDone_result(const LinkedHashtagsService_thriftStreamDone_result&);
  LinkedHashtagsService_thriftStreamDone_result& operator=(const LinkedHashtagsService_thriftStreamDone_result&);
  LinkedHashtagsService_thriftStreamDone_result() : success(0) {
  }

  virtual ~LinkedHashtagsService_thriftStreamDone_result() throw();
  bool success;

  _LinkedHashtagsService_thriftStreamDone_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const LinkedHashtagsService_thriftStreamDone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LinkedHashtagsService_thriftStreamDone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedHashtagsService_thriftStreamDone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LinkedHashtagsService_thriftStreamDone_presult__isset {
  _LinkedHashtagsService_thriftStreamDone_presult__isset() : success(false) {}
  bool success :1;
} _LinkedHashtagsService_thriftStreamDone_presult__isset;

class LinkedHashtagsService_thriftStreamDone_presult {
 public:


  virtual ~LinkedHashtagsService_thriftStreamDone_presult() throw();
  bool* success;

  _LinkedHashtagsService_thriftStreamDone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LinkedHashtagsServiceClient : virtual public LinkedHashtagsServiceIf {
 public:
  LinkedHashtagsServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LinkedHashtagsServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void thriftGenerateGraphData(Output& _return, const Input& tweetList, const IOutput& oldGraph, const FreewordList& freewordList);
  void send_thriftGenerateGraphData(const Input& tweetList, const IOutput& oldGraph, const FreewordList& freewordList);
  void recv_thriftGenerateGraphData(Output& _return);
  bool thriftCreatStream(const std::string& id, const FreewordList& freewordList);
  void send_thriftCreatStream(const std::string& id, const FreewordList& freewordList);
  bool recv_thriftCreatStream();
  bool thriftAddNewTweets(const std::string& id, const Input& tweetList);
  void send_thriftAddNewTweets(const std::string& id, const Input& tweetList);
  bool recv_thriftAddNewTweets();
  bool thriftStreamDone(const std::string& id);
  void send_thriftStreamDone(const std::string& id);
  bool recv_thriftStreamDone();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LinkedHashtagsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LinkedHashtagsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_thriftGenerateGraphData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_thriftCreatStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_thriftAddNewTweets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_thriftStreamDone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LinkedHashtagsServiceProcessor(::apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf> iface) :
    iface_(iface) {
    processMap_["thriftGenerateGraphData"] = &LinkedHashtagsServiceProcessor::process_thriftGenerateGraphData;
    processMap_["thriftCreatStream"] = &LinkedHashtagsServiceProcessor::process_thriftCreatStream;
    processMap_["thriftAddNewTweets"] = &LinkedHashtagsServiceProcessor::process_thriftAddNewTweets;
    processMap_["thriftStreamDone"] = &LinkedHashtagsServiceProcessor::process_thriftStreamDone;
  }

  virtual ~LinkedHashtagsServiceProcessor() {}
};

class LinkedHashtagsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LinkedHashtagsServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< LinkedHashtagsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< LinkedHashtagsServiceIfFactory > handlerFactory_;
};

class LinkedHashtagsServiceMultiface : virtual public LinkedHashtagsServiceIf {
 public:
  LinkedHashtagsServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LinkedHashtagsServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf> > ifaces_;
  LinkedHashtagsServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<LinkedHashtagsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void thriftGenerateGraphData(Output& _return, const Input& tweetList, const IOutput& oldGraph, const FreewordList& freewordList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->thriftGenerateGraphData(_return, tweetList, oldGraph, freewordList);
    }
    ifaces_[i]->thriftGenerateGraphData(_return, tweetList, oldGraph, freewordList);
    return;
  }

  bool thriftCreatStream(const std::string& id, const FreewordList& freewordList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->thriftCreatStream(id, freewordList);
    }
    return ifaces_[i]->thriftCreatStream(id, freewordList);
  }

  bool thriftAddNewTweets(const std::string& id, const Input& tweetList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->thriftAddNewTweets(id, tweetList);
    }
    return ifaces_[i]->thriftAddNewTweets(id, tweetList);
  }

  bool thriftStreamDone(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->thriftStreamDone(id);
    }
    return ifaces_[i]->thriftStreamDone(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LinkedHashtagsServiceConcurrentClient : virtual public LinkedHashtagsServiceIf {
 public:
  LinkedHashtagsServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LinkedHashtagsServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void thriftGenerateGraphData(Output& _return, const Input& tweetList, const IOutput& oldGraph, const FreewordList& freewordList);
  int32_t send_thriftGenerateGraphData(const Input& tweetList, const IOutput& oldGraph, const FreewordList& freewordList);
  void recv_thriftGenerateGraphData(Output& _return, const int32_t seqid);
  bool thriftCreatStream(const std::string& id, const FreewordList& freewordList);
  int32_t send_thriftCreatStream(const std::string& id, const FreewordList& freewordList);
  bool recv_thriftCreatStream(const int32_t seqid);
  bool thriftAddNewTweets(const std::string& id, const Input& tweetList);
  int32_t send_thriftAddNewTweets(const std::string& id, const Input& tweetList);
  bool recv_thriftAddNewTweets(const int32_t seqid);
  bool thriftStreamDone(const std::string& id);
  int32_t send_thriftStreamDone(const std::string& id);
  bool recv_thriftStreamDone(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif

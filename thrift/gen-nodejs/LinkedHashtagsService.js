//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var LinkedHashtagsService_thriftGenerateGraphData_args = function(args) {
  this.tweetList = null;
  this.oldGraph = null;
  this.freewordList = null;
  if (args) {
    if (args.tweetList !== undefined && args.tweetList !== null) {
      this.tweetList = Thrift.copyList(args.tweetList, [ttypes.Tweet]);
    }
    if (args.oldGraph !== undefined && args.oldGraph !== null) {
      this.oldGraph = new ttypes.IOutput(args.oldGraph);
    }
    if (args.freewordList !== undefined && args.freewordList !== null) {
      this.freewordList = new ttypes.FreewordList(args.freewordList);
    }
  }
};
LinkedHashtagsService_thriftGenerateGraphData_args.prototype = {};
LinkedHashtagsService_thriftGenerateGraphData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tweetList = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = new ttypes.Tweet();
          elem38.read(input);
          this.tweetList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldGraph = new ttypes.IOutput();
        this.oldGraph.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.freewordList = new ttypes.FreewordList();
        this.freewordList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftGenerateGraphData_args.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftGenerateGraphData_args');
  if (this.tweetList !== null && this.tweetList !== undefined) {
    output.writeFieldBegin('tweetList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tweetList.length);
    for (var iter39 in this.tweetList) {
      if (this.tweetList.hasOwnProperty(iter39)) {
        iter39 = this.tweetList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.oldGraph !== null && this.oldGraph !== undefined) {
    output.writeFieldBegin('oldGraph', Thrift.Type.STRUCT, 2);
    this.oldGraph.write(output);
    output.writeFieldEnd();
  }
  if (this.freewordList !== null && this.freewordList !== undefined) {
    output.writeFieldBegin('freewordList', Thrift.Type.STRUCT, 3);
    this.freewordList.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftGenerateGraphData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Output(args.success);
    }
  }
};
LinkedHashtagsService_thriftGenerateGraphData_result.prototype = {};
LinkedHashtagsService_thriftGenerateGraphData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftGenerateGraphData_result.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftGenerateGraphData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftCreatStream_args = function(args) {
  this.id = null;
  this.freewordList = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.freewordList !== undefined && args.freewordList !== null) {
      this.freewordList = new ttypes.FreewordList(args.freewordList);
    }
  }
};
LinkedHashtagsService_thriftCreatStream_args.prototype = {};
LinkedHashtagsService_thriftCreatStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.freewordList = new ttypes.FreewordList();
        this.freewordList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftCreatStream_args.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftCreatStream_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.freewordList !== null && this.freewordList !== undefined) {
    output.writeFieldBegin('freewordList', Thrift.Type.STRUCT, 2);
    this.freewordList.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftCreatStream_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LinkedHashtagsService_thriftCreatStream_result.prototype = {};
LinkedHashtagsService_thriftCreatStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftCreatStream_result.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftCreatStream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftAddNewTweets_args = function(args) {
  this.id = null;
  this.tweetList = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.tweetList !== undefined && args.tweetList !== null) {
      this.tweetList = Thrift.copyList(args.tweetList, [ttypes.Tweet]);
    }
  }
};
LinkedHashtagsService_thriftAddNewTweets_args.prototype = {};
LinkedHashtagsService_thriftAddNewTweets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tweetList = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.Tweet();
          elem43.read(input);
          this.tweetList.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftAddNewTweets_args.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftAddNewTweets_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.tweetList !== null && this.tweetList !== undefined) {
    output.writeFieldBegin('tweetList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tweetList.length);
    for (var iter44 in this.tweetList) {
      if (this.tweetList.hasOwnProperty(iter44)) {
        iter44 = this.tweetList[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftAddNewTweets_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LinkedHashtagsService_thriftAddNewTweets_result.prototype = {};
LinkedHashtagsService_thriftAddNewTweets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftAddNewTweets_result.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftAddNewTweets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftStreamDone_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
LinkedHashtagsService_thriftStreamDone_args.prototype = {};
LinkedHashtagsService_thriftStreamDone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftStreamDone_args.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftStreamDone_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsService_thriftStreamDone_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LinkedHashtagsService_thriftStreamDone_result.prototype = {};
LinkedHashtagsService_thriftStreamDone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedHashtagsService_thriftStreamDone_result.prototype.write = function(output) {
  output.writeStructBegin('LinkedHashtagsService_thriftStreamDone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkedHashtagsServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
LinkedHashtagsServiceClient.prototype = {};
LinkedHashtagsServiceClient.prototype.seqid = function() { return this._seqid; };
LinkedHashtagsServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

LinkedHashtagsServiceClient.prototype.thriftGenerateGraphData = function(tweetList, oldGraph, freewordList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_thriftGenerateGraphData(tweetList, oldGraph, freewordList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_thriftGenerateGraphData(tweetList, oldGraph, freewordList);
  }
};

LinkedHashtagsServiceClient.prototype.send_thriftGenerateGraphData = function(tweetList, oldGraph, freewordList) {
  var output = new this.pClass(this.output);
  var params = {
    tweetList: tweetList,
    oldGraph: oldGraph,
    freewordList: freewordList
  };
  var args = new LinkedHashtagsService_thriftGenerateGraphData_args(params);
  try {
    output.writeMessageBegin('thriftGenerateGraphData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LinkedHashtagsServiceClient.prototype.recv_thriftGenerateGraphData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LinkedHashtagsService_thriftGenerateGraphData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('thriftGenerateGraphData failed: unknown result');
};

LinkedHashtagsServiceClient.prototype.thriftCreatStream = function(id, freewordList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_thriftCreatStream(id, freewordList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_thriftCreatStream(id, freewordList);
  }
};

LinkedHashtagsServiceClient.prototype.send_thriftCreatStream = function(id, freewordList) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    freewordList: freewordList
  };
  var args = new LinkedHashtagsService_thriftCreatStream_args(params);
  try {
    output.writeMessageBegin('thriftCreatStream', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LinkedHashtagsServiceClient.prototype.recv_thriftCreatStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LinkedHashtagsService_thriftCreatStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('thriftCreatStream failed: unknown result');
};

LinkedHashtagsServiceClient.prototype.thriftAddNewTweets = function(id, tweetList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_thriftAddNewTweets(id, tweetList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_thriftAddNewTweets(id, tweetList);
  }
};

LinkedHashtagsServiceClient.prototype.send_thriftAddNewTweets = function(id, tweetList) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    tweetList: tweetList
  };
  var args = new LinkedHashtagsService_thriftAddNewTweets_args(params);
  try {
    output.writeMessageBegin('thriftAddNewTweets', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LinkedHashtagsServiceClient.prototype.recv_thriftAddNewTweets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LinkedHashtagsService_thriftAddNewTweets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('thriftAddNewTweets failed: unknown result');
};

LinkedHashtagsServiceClient.prototype.thriftStreamDone = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_thriftStreamDone(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_thriftStreamDone(id);
  }
};

LinkedHashtagsServiceClient.prototype.send_thriftStreamDone = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new LinkedHashtagsService_thriftStreamDone_args(params);
  try {
    output.writeMessageBegin('thriftStreamDone', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LinkedHashtagsServiceClient.prototype.recv_thriftStreamDone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LinkedHashtagsService_thriftStreamDone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('thriftStreamDone failed: unknown result');
};
var LinkedHashtagsServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
LinkedHashtagsServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
LinkedHashtagsServiceProcessor.prototype.process_thriftGenerateGraphData = function(seqid, input, output) {
  var args = new LinkedHashtagsService_thriftGenerateGraphData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.thriftGenerateGraphData.length === 3) {
    Q.fcall(this._handler.thriftGenerateGraphData.bind(this._handler),
      args.tweetList,
      args.oldGraph,
      args.freewordList
    ).then(function(result) {
      var result_obj = new LinkedHashtagsService_thriftGenerateGraphData_result({success: result});
      output.writeMessageBegin("thriftGenerateGraphData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("thriftGenerateGraphData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.thriftGenerateGraphData(args.tweetList, args.oldGraph, args.freewordList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LinkedHashtagsService_thriftGenerateGraphData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("thriftGenerateGraphData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("thriftGenerateGraphData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LinkedHashtagsServiceProcessor.prototype.process_thriftCreatStream = function(seqid, input, output) {
  var args = new LinkedHashtagsService_thriftCreatStream_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.thriftCreatStream.length === 2) {
    Q.fcall(this._handler.thriftCreatStream.bind(this._handler),
      args.id,
      args.freewordList
    ).then(function(result) {
      var result_obj = new LinkedHashtagsService_thriftCreatStream_result({success: result});
      output.writeMessageBegin("thriftCreatStream", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("thriftCreatStream", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.thriftCreatStream(args.id, args.freewordList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LinkedHashtagsService_thriftCreatStream_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("thriftCreatStream", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("thriftCreatStream", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LinkedHashtagsServiceProcessor.prototype.process_thriftAddNewTweets = function(seqid, input, output) {
  var args = new LinkedHashtagsService_thriftAddNewTweets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.thriftAddNewTweets.length === 2) {
    Q.fcall(this._handler.thriftAddNewTweets.bind(this._handler),
      args.id,
      args.tweetList
    ).then(function(result) {
      var result_obj = new LinkedHashtagsService_thriftAddNewTweets_result({success: result});
      output.writeMessageBegin("thriftAddNewTweets", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("thriftAddNewTweets", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.thriftAddNewTweets(args.id, args.tweetList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LinkedHashtagsService_thriftAddNewTweets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("thriftAddNewTweets", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("thriftAddNewTweets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LinkedHashtagsServiceProcessor.prototype.process_thriftStreamDone = function(seqid, input, output) {
  var args = new LinkedHashtagsService_thriftStreamDone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.thriftStreamDone.length === 1) {
    Q.fcall(this._handler.thriftStreamDone.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new LinkedHashtagsService_thriftStreamDone_result({success: result});
      output.writeMessageBegin("thriftStreamDone", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("thriftStreamDone", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.thriftStreamDone(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LinkedHashtagsService_thriftStreamDone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("thriftStreamDone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("thriftStreamDone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

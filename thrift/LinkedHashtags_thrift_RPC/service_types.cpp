/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thriftService {


Cod::~Cod() throw() {
}


void Cod::__set_hasGeoinfo(const bool val) {
  this->hasGeoinfo = val;
}

void Cod::__set_isPoint(const bool val) {
  this->isPoint = val;
__isset.isPoint = true;
}

void Cod::__set_x(const double val) {
  this->x = val;
__isset.x = true;
}

void Cod::__set_y(const double val) {
  this->y = val;
__isset.y = true;
}
std::ostream& operator<<(std::ostream& out, const Cod& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Cod::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_hasGeoinfo = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasGeoinfo);
          isset_hasGeoinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isPoint);
          this->__isset.isPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_hasGeoinfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Cod::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Cod");

  xfer += oprot->writeFieldBegin("hasGeoinfo", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasGeoinfo);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.isPoint) {
    xfer += oprot->writeFieldBegin("isPoint", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->isPoint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x) {
    xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->x);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y) {
    xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->y);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Cod &a, Cod &b) {
  using ::std::swap;
  swap(a.hasGeoinfo, b.hasGeoinfo);
  swap(a.isPoint, b.isPoint);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

Cod::Cod(const Cod& other0) {
  hasGeoinfo = other0.hasGeoinfo;
  isPoint = other0.isPoint;
  x = other0.x;
  y = other0.y;
  __isset = other0.__isset;
}
Cod& Cod::operator=(const Cod& other1) {
  hasGeoinfo = other1.hasGeoinfo;
  isPoint = other1.isPoint;
  x = other1.x;
  y = other1.y;
  __isset = other1.__isset;
  return *this;
}
void Cod::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Cod(";
  out << "hasGeoinfo=" << to_string(hasGeoinfo);
  out << ", " << "isPoint="; (__isset.isPoint ? (out << to_string(isPoint)) : (out << "<null>"));
  out << ", " << "x="; (__isset.x ? (out << to_string(x)) : (out << "<null>"));
  out << ", " << "y="; (__isset.y ? (out << to_string(y)) : (out << "<null>"));
  out << ")";
}


User::~User() throw() {
}


void User::__set_name(const std::string& val) {
  this->name = val;
}

void User::__set_screen_name(const std::string& val) {
  this->screen_name = val;
}

void User::__set_verified(const bool val) {
  this->verified = val;
}

void User::__set_profile_image_url_https(const std::string& val) {
  this->profile_image_url_https = val;
}
std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_screen_name = false;
  bool isset_verified = false;
  bool isset_profile_image_url_https = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->screen_name);
          isset_screen_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->verified);
          isset_verified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profile_image_url_https);
          isset_profile_image_url_https = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_screen_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_verified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_profile_image_url_https)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("screen_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->screen_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verified", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->verified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profile_image_url_https", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->profile_image_url_https);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.screen_name, b.screen_name);
  swap(a.verified, b.verified);
  swap(a.profile_image_url_https, b.profile_image_url_https);
}

User::User(const User& other2) {
  name = other2.name;
  screen_name = other2.screen_name;
  verified = other2.verified;
  profile_image_url_https = other2.profile_image_url_https;
}
User& User::operator=(const User& other3) {
  name = other3.name;
  screen_name = other3.screen_name;
  verified = other3.verified;
  profile_image_url_https = other3.profile_image_url_https;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "name=" << to_string(name);
  out << ", " << "screen_name=" << to_string(screen_name);
  out << ", " << "verified=" << to_string(verified);
  out << ", " << "profile_image_url_https=" << to_string(profile_image_url_https);
  out << ")";
}


Tweet::~Tweet() throw() {
}


void Tweet::__set_id(const std::string& val) {
  this->id = val;
}

void Tweet::__set_created_at(const std::string& val) {
  this->created_at = val;
}

void Tweet::__set_text(const std::string& val) {
  this->text = val;
}

void Tweet::__set__text(const std::string& val) {
  this->_text = val;
}

void Tweet::__set_user(const User& val) {
  this->user = val;
}

void Tweet::__set_retweet_count(const int32_t val) {
  this->retweet_count = val;
}

void Tweet::__set_favorite_count(const int32_t val) {
  this->favorite_count = val;
}

void Tweet::__set_lang(const std::string& val) {
  this->lang = val;
}

void Tweet::__set_hashtags(const std::vector<std::string> & val) {
  this->hashtags = val;
}

void Tweet::__set_geoInfo(const Cod& val) {
  this->geoInfo = val;
}
std::ostream& operator<<(std::ostream& out, const Tweet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Tweet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_created_at = false;
  bool isset_text = false;
  bool isset__text = false;
  bool isset_user = false;
  bool isset_retweet_count = false;
  bool isset_favorite_count = false;
  bool isset_lang = false;
  bool isset_hashtags = false;
  bool isset_geoInfo = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created_at);
          isset_created_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          isset_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_text);
          isset__text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retweet_count);
          isset_retweet_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->favorite_count);
          isset_favorite_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lang);
          isset_lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hashtags.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->hashtags.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readString(this->hashtags[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          isset_hashtags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geoInfo.read(iprot);
          isset_geoInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_created_at)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_retweet_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_favorite_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lang)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hashtags)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_geoInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Tweet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tweet");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_at", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->created_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_text", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->user.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retweet_count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->retweet_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favorite_count", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->favorite_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lang", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->lang);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hashtags", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hashtags.size()));
    std::vector<std::string> ::const_iterator _iter9;
    for (_iter9 = this->hashtags.begin(); _iter9 != this->hashtags.end(); ++_iter9)
    {
      xfer += oprot->writeString((*_iter9));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geoInfo", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->geoInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tweet &a, Tweet &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.created_at, b.created_at);
  swap(a.text, b.text);
  swap(a._text, b._text);
  swap(a.user, b.user);
  swap(a.retweet_count, b.retweet_count);
  swap(a.favorite_count, b.favorite_count);
  swap(a.lang, b.lang);
  swap(a.hashtags, b.hashtags);
  swap(a.geoInfo, b.geoInfo);
}

Tweet::Tweet(const Tweet& other10) {
  id = other10.id;
  created_at = other10.created_at;
  text = other10.text;
  _text = other10._text;
  user = other10.user;
  retweet_count = other10.retweet_count;
  favorite_count = other10.favorite_count;
  lang = other10.lang;
  hashtags = other10.hashtags;
  geoInfo = other10.geoInfo;
}
Tweet& Tweet::operator=(const Tweet& other11) {
  id = other11.id;
  created_at = other11.created_at;
  text = other11.text;
  _text = other11._text;
  user = other11.user;
  retweet_count = other11.retweet_count;
  favorite_count = other11.favorite_count;
  lang = other11.lang;
  hashtags = other11.hashtags;
  geoInfo = other11.geoInfo;
  return *this;
}
void Tweet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tweet(";
  out << "id=" << to_string(id);
  out << ", " << "created_at=" << to_string(created_at);
  out << ", " << "text=" << to_string(text);
  out << ", " << "_text=" << to_string(_text);
  out << ", " << "user=" << to_string(user);
  out << ", " << "retweet_count=" << to_string(retweet_count);
  out << ", " << "favorite_count=" << to_string(favorite_count);
  out << ", " << "lang=" << to_string(lang);
  out << ", " << "hashtags=" << to_string(hashtags);
  out << ", " << "geoInfo=" << to_string(geoInfo);
  out << ")";
}


UserTweetCount::~UserTweetCount() throw() {
}


void UserTweetCount::__set_username(const std::string& val) {
  this->username = val;
}

void UserTweetCount::__set_tweetCount(const int32_t val) {
  this->tweetCount = val;
}
std::ostream& operator<<(std::ostream& out, const UserTweetCount& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserTweetCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_username = false;
  bool isset_tweetCount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          isset_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tweetCount);
          isset_tweetCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_username)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tweetCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserTweetCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserTweetCount");

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tweetCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tweetCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserTweetCount &a, UserTweetCount &b) {
  using ::std::swap;
  swap(a.username, b.username);
  swap(a.tweetCount, b.tweetCount);
}

UserTweetCount::UserTweetCount(const UserTweetCount& other12) {
  username = other12.username;
  tweetCount = other12.tweetCount;
}
UserTweetCount& UserTweetCount::operator=(const UserTweetCount& other13) {
  username = other13.username;
  tweetCount = other13.tweetCount;
  return *this;
}
void UserTweetCount::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserTweetCount(";
  out << "username=" << to_string(username);
  out << ", " << "tweetCount=" << to_string(tweetCount);
  out << ")";
}


Edge::~Edge() throw() {
}


void Edge::__set_id(const int32_t val) {
  this->id = val;
}

void Edge::__set_tweets(const std::vector<std::string> & val) {
  this->tweets = val;
}

void Edge::__set_source(const int32_t val) {
  this->source = val;
}

void Edge::__set_target(const int32_t val) {
  this->target = val;
}

void Edge::__set_size(const int32_t val) {
  this->size = val;
}

void Edge::__set_weight(const int32_t val) {
  this->weight = val;
}

void Edge::__set_label(const std::string& val) {
  this->label = val;
}
std::ostream& operator<<(std::ostream& out, const Edge& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Edge::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_tweets = false;
  bool isset_source = false;
  bool isset_target = false;
  bool isset_size = false;
  bool isset_weight = false;
  bool isset_label = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tweets.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->tweets.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readString(this->tweets[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          isset_tweets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->source);
          isset_source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->target);
          isset_target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          isset_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tweets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_source)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Edge::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Edge");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tweets", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tweets.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->tweets.begin(); _iter19 != this->tweets.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->target);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Edge &a, Edge &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tweets, b.tweets);
  swap(a.source, b.source);
  swap(a.target, b.target);
  swap(a.size, b.size);
  swap(a.weight, b.weight);
  swap(a.label, b.label);
}

Edge::Edge(const Edge& other20) {
  id = other20.id;
  tweets = other20.tweets;
  source = other20.source;
  target = other20.target;
  size = other20.size;
  weight = other20.weight;
  label = other20.label;
}
Edge& Edge::operator=(const Edge& other21) {
  id = other21.id;
  tweets = other21.tweets;
  source = other21.source;
  target = other21.target;
  size = other21.size;
  weight = other21.weight;
  label = other21.label;
  return *this;
}
void Edge::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Edge(";
  out << "id=" << to_string(id);
  out << ", " << "tweets=" << to_string(tweets);
  out << ", " << "source=" << to_string(source);
  out << ", " << "target=" << to_string(target);
  out << ", " << "size=" << to_string(size);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "label=" << to_string(label);
  out << ")";
}


Node::~Node() throw() {
}


void Node::__set_id(const int32_t val) {
  this->id = val;
}

void Node::__set_label(const std::string& val) {
  this->label = val;
}

void Node::__set_size(const int32_t val) {
  this->size = val;
}

void Node::__set_weight(const int32_t val) {
  this->weight = val;
}

void Node::__set_x(const double val) {
  this->x = val;
__isset.x = true;
}

void Node::__set_y(const double val) {
  this->y = val;
__isset.y = true;
}
std::ostream& operator<<(std::ostream& out, const Node& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Node::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_label = false;
  bool isset_size = false;
  bool isset_weight = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          isset_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Node::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Node");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.x) {
    xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->x);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y) {
    xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->y);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Node &a, Node &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.label, b.label);
  swap(a.size, b.size);
  swap(a.weight, b.weight);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

Node::Node(const Node& other22) {
  id = other22.id;
  label = other22.label;
  size = other22.size;
  weight = other22.weight;
  x = other22.x;
  y = other22.y;
  __isset = other22.__isset;
}
Node& Node::operator=(const Node& other23) {
  id = other23.id;
  label = other23.label;
  size = other23.size;
  weight = other23.weight;
  x = other23.x;
  y = other23.y;
  __isset = other23.__isset;
  return *this;
}
void Node::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Node(";
  out << "id=" << to_string(id);
  out << ", " << "label=" << to_string(label);
  out << ", " << "size=" << to_string(size);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "x="; (__isset.x ? (out << to_string(x)) : (out << "<null>"));
  out << ", " << "y="; (__isset.y ? (out << to_string(y)) : (out << "<null>"));
  out << ")";
}


GraphData::~GraphData() throw() {
}


void GraphData::__set_edges(const Edges& val) {
  this->edges = val;
}

void GraphData::__set_nodes(const Nodes& val) {
  this->nodes = val;
}
std::ostream& operator<<(std::ostream& out, const GraphData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GraphData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_edges = false;
  bool isset_nodes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->edges.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->edges.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->edges[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_edges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->nodes.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += this->nodes[_i33].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_edges)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GraphData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GraphData");

  xfer += oprot->writeFieldBegin("edges", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->edges.size()));
    std::vector<Edge> ::const_iterator _iter34;
    for (_iter34 = this->edges.begin(); _iter34 != this->edges.end(); ++_iter34)
    {
      xfer += (*_iter34).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<Node> ::const_iterator _iter35;
    for (_iter35 = this->nodes.begin(); _iter35 != this->nodes.end(); ++_iter35)
    {
      xfer += (*_iter35).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GraphData &a, GraphData &b) {
  using ::std::swap;
  swap(a.edges, b.edges);
  swap(a.nodes, b.nodes);
}

GraphData::GraphData(const GraphData& other36) {
  edges = other36.edges;
  nodes = other36.nodes;
}
GraphData& GraphData::operator=(const GraphData& other37) {
  edges = other37.edges;
  nodes = other37.nodes;
  return *this;
}
void GraphData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GraphData(";
  out << "edges=" << to_string(edges);
  out << ", " << "nodes=" << to_string(nodes);
  out << ")";
}


GraphMetadata::~GraphMetadata() throw() {
}


void GraphMetadata::__set_numberOfTweets(const int32_t val) {
  this->numberOfTweets = val;
}

void GraphMetadata::__set_numberOfNodes(const int32_t val) {
  this->numberOfNodes = val;
}

void GraphMetadata::__set_numberOfEdges(const int32_t val) {
  this->numberOfEdges = val;
}
std::ostream& operator<<(std::ostream& out, const GraphMetadata& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GraphMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numberOfTweets = false;
  bool isset_numberOfNodes = false;
  bool isset_numberOfEdges = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfTweets);
          isset_numberOfTweets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfNodes);
          isset_numberOfNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfEdges);
          isset_numberOfEdges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numberOfTweets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfEdges)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GraphMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GraphMetadata");

  xfer += oprot->writeFieldBegin("numberOfTweets", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->numberOfTweets);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfNodes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->numberOfNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfEdges", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numberOfEdges);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GraphMetadata &a, GraphMetadata &b) {
  using ::std::swap;
  swap(a.numberOfTweets, b.numberOfTweets);
  swap(a.numberOfNodes, b.numberOfNodes);
  swap(a.numberOfEdges, b.numberOfEdges);
}

GraphMetadata::GraphMetadata(const GraphMetadata& other38) {
  numberOfTweets = other38.numberOfTweets;
  numberOfNodes = other38.numberOfNodes;
  numberOfEdges = other38.numberOfEdges;
}
GraphMetadata& GraphMetadata::operator=(const GraphMetadata& other39) {
  numberOfTweets = other39.numberOfTweets;
  numberOfNodes = other39.numberOfNodes;
  numberOfEdges = other39.numberOfEdges;
  return *this;
}
void GraphMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GraphMetadata(";
  out << "numberOfTweets=" << to_string(numberOfTweets);
  out << ", " << "numberOfNodes=" << to_string(numberOfNodes);
  out << ", " << "numberOfEdges=" << to_string(numberOfEdges);
  out << ")";
}


Output::~Output() throw() {
}


void Output::__set_graphData(const GraphData& val) {
  this->graphData = val;
}

void Output::__set_tweets(const TweetList& val) {
  this->tweets = val;
}

void Output::__set_graphMetadata(const GraphMetadata& val) {
  this->graphMetadata = val;
}

void Output::__set_topUsers(const UserTweetCounts& val) {
  this->topUsers = val;
}
std::ostream& operator<<(std::ostream& out, const Output& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Output::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_graphData = false;
  bool isset_tweets = false;
  bool isset_graphMetadata = false;
  bool isset_topUsers = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->graphData.read(iprot);
          isset_graphData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tweets.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->tweets.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->tweets[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_tweets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->graphMetadata.read(iprot);
          isset_graphMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->topUsers.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->topUsers.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += this->topUsers[_i49].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_topUsers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_graphData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tweets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_graphMetadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topUsers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Output::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Output");

  xfer += oprot->writeFieldBegin("graphData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->graphData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tweets", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tweets.size()));
    std::vector<Tweet> ::const_iterator _iter50;
    for (_iter50 = this->tweets.begin(); _iter50 != this->tweets.end(); ++_iter50)
    {
      xfer += (*_iter50).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("graphMetadata", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->graphMetadata.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topUsers", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->topUsers.size()));
    std::vector<UserTweetCount> ::const_iterator _iter51;
    for (_iter51 = this->topUsers.begin(); _iter51 != this->topUsers.end(); ++_iter51)
    {
      xfer += (*_iter51).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Output &a, Output &b) {
  using ::std::swap;
  swap(a.graphData, b.graphData);
  swap(a.tweets, b.tweets);
  swap(a.graphMetadata, b.graphMetadata);
  swap(a.topUsers, b.topUsers);
}

Output::Output(const Output& other52) {
  graphData = other52.graphData;
  tweets = other52.tweets;
  graphMetadata = other52.graphMetadata;
  topUsers = other52.topUsers;
}
Output& Output::operator=(const Output& other53) {
  graphData = other53.graphData;
  tweets = other53.tweets;
  graphMetadata = other53.graphMetadata;
  topUsers = other53.topUsers;
  return *this;
}
void Output::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Output(";
  out << "graphData=" << to_string(graphData);
  out << ", " << "tweets=" << to_string(tweets);
  out << ", " << "graphMetadata=" << to_string(graphMetadata);
  out << ", " << "topUsers=" << to_string(topUsers);
  out << ")";
}


IOutput::~IOutput() throw() {
}


void IOutput::__set_hasOldGraph(const bool val) {
  this->hasOldGraph = val;
}

void IOutput::__set_oldOutput(const Output& val) {
  this->oldOutput = val;
__isset.oldOutput = true;
}
std::ostream& operator<<(std::ostream& out, const IOutput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IOutput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_hasOldGraph = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasOldGraph);
          isset_hasOldGraph = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->oldOutput.read(iprot);
          this->__isset.oldOutput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_hasOldGraph)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IOutput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IOutput");

  xfer += oprot->writeFieldBegin("hasOldGraph", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasOldGraph);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.oldOutput) {
    xfer += oprot->writeFieldBegin("oldOutput", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->oldOutput.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IOutput &a, IOutput &b) {
  using ::std::swap;
  swap(a.hasOldGraph, b.hasOldGraph);
  swap(a.oldOutput, b.oldOutput);
  swap(a.__isset, b.__isset);
}

IOutput::IOutput(const IOutput& other54) {
  hasOldGraph = other54.hasOldGraph;
  oldOutput = other54.oldOutput;
  __isset = other54.__isset;
}
IOutput& IOutput::operator=(const IOutput& other55) {
  hasOldGraph = other55.hasOldGraph;
  oldOutput = other55.oldOutput;
  __isset = other55.__isset;
  return *this;
}
void IOutput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IOutput(";
  out << "hasOldGraph=" << to_string(hasOldGraph);
  out << ", " << "oldOutput="; (__isset.oldOutput ? (out << to_string(oldOutput)) : (out << "<null>"));
  out << ")";
}


FreewordList::~FreewordList() throw() {
}


void FreewordList::__set_hasFreewordList(const bool val) {
  this->hasFreewordList = val;
}

void FreewordList::__set_ListFreeword(const std::vector<std::string> & val) {
  this->ListFreeword = val;
__isset.ListFreeword = true;
}
std::ostream& operator<<(std::ostream& out, const FreewordList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FreewordList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_hasFreewordList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasFreewordList);
          isset_hasFreewordList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ListFreeword.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _etype59;
            xfer += iprot->readListBegin(_etype59, _size56);
            this->ListFreeword.resize(_size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              xfer += iprot->readString(this->ListFreeword[_i60]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ListFreeword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_hasFreewordList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FreewordList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FreewordList");

  xfer += oprot->writeFieldBegin("hasFreewordList", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasFreewordList);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ListFreeword) {
    xfer += oprot->writeFieldBegin("ListFreeword", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->ListFreeword.size()));
      std::vector<std::string> ::const_iterator _iter61;
      for (_iter61 = this->ListFreeword.begin(); _iter61 != this->ListFreeword.end(); ++_iter61)
      {
        xfer += oprot->writeString((*_iter61));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FreewordList &a, FreewordList &b) {
  using ::std::swap;
  swap(a.hasFreewordList, b.hasFreewordList);
  swap(a.ListFreeword, b.ListFreeword);
  swap(a.__isset, b.__isset);
}

FreewordList::FreewordList(const FreewordList& other62) {
  hasFreewordList = other62.hasFreewordList;
  ListFreeword = other62.ListFreeword;
  __isset = other62.__isset;
}
FreewordList& FreewordList::operator=(const FreewordList& other63) {
  hasFreewordList = other63.hasFreewordList;
  ListFreeword = other63.ListFreeword;
  __isset = other63.__isset;
  return *this;
}
void FreewordList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FreewordList(";
  out << "hasFreewordList=" << to_string(hasFreewordList);
  out << ", " << "ListFreeword="; (__isset.ListFreeword ? (out << to_string(ListFreeword)) : (out << "<null>"));
  out << ")";
}

} // namespace
